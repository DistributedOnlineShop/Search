// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: search_log.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSearchLog = `-- name: CreateSearchLog :one
INSERT INTO search_log (
    user_id,
    search_query,
    search_filters,
    results_count
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING search_id, user_id, search_query, search_filters, results_count, searched_at
`

type CreateSearchLogParams struct {
	UserID        pgtype.UUID `json:"user_id"`
	SearchQuery   string      `json:"search_query"`
	SearchFilters []byte      `json:"search_filters"`
	ResultsCount  int32       `json:"results_count"`
}

func (q *Queries) CreateSearchLog(ctx context.Context, arg CreateSearchLogParams) (SearchLog, error) {
	row := q.db.QueryRow(ctx, createSearchLog,
		arg.UserID,
		arg.SearchQuery,
		arg.SearchFilters,
		arg.ResultsCount,
	)
	var i SearchLog
	err := row.Scan(
		&i.SearchID,
		&i.UserID,
		&i.SearchQuery,
		&i.SearchFilters,
		&i.ResultsCount,
		&i.SearchedAt,
	)
	return i, err
}

const getSearchLogByTime = `-- name: GetSearchLogByTime :many
SELECT 
    search_id, user_id, search_query, search_filters, results_count, searched_at 
FROM 
    search_log
WHERE
    searched_at BETWEEN $1 AND $2
`

type GetSearchLogByTimeParams struct {
	SearchedAt   pgtype.TIMESTAMP(0) `json:"searched_at"`
	SearchedAt_2 pgtype.TIMESTAMP(0) `json:"searched_at_2"`
}

func (q *Queries) GetSearchLogByTime(ctx context.Context, arg GetSearchLogByTimeParams) ([]SearchLog, error) {
	rows, err := q.db.Query(ctx, getSearchLogByTime, arg.SearchedAt, arg.SearchedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchLog{}
	for rows.Next() {
		var i SearchLog
		if err := rows.Scan(
			&i.SearchID,
			&i.UserID,
			&i.SearchQuery,
			&i.SearchFilters,
			&i.ResultsCount,
			&i.SearchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSearchLogByUserId = `-- name: GetSearchLogByUserId :many
SELECT 
    search_id, user_id, search_query, search_filters, results_count, searched_at 
FROM 
    search_log
WHERE
    user_id = $1
`

func (q *Queries) GetSearchLogByUserId(ctx context.Context, userID pgtype.UUID) ([]SearchLog, error) {
	rows, err := q.db.Query(ctx, getSearchLogByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchLog{}
	for rows.Next() {
		var i SearchLog
		if err := rows.Scan(
			&i.SearchID,
			&i.UserID,
			&i.SearchQuery,
			&i.SearchFilters,
			&i.ResultsCount,
			&i.SearchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSearchLogList = `-- name: GetSearchLogList :many
SELECT 
    search_id, user_id, search_query, search_filters, results_count, searched_at 
FROM  
    search_log
ORDER BY 
    searched_at DESC
`

func (q *Queries) GetSearchLogList(ctx context.Context) ([]SearchLog, error) {
	rows, err := q.db.Query(ctx, getSearchLogList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchLog{}
	for rows.Next() {
		var i SearchLog
		if err := rows.Scan(
			&i.SearchID,
			&i.UserID,
			&i.SearchQuery,
			&i.SearchFilters,
			&i.ResultsCount,
			&i.SearchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
